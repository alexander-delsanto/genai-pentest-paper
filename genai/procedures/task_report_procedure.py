from termcolor import cprint
from pydantic import BaseModel
from typing import Dict, Any, Type
from .base_procedure import BaseProcedure


class TaskReportModel(BaseModel):
    task_report: str
    current_status: str

    class Config:
        @staticmethod
        def json_schema_extra(schema: Dict[str, Any], model: Type['TaskReportModel']) -> None:
            for prop in schema.get('properties', {}).values():
                prop.pop('title', None)


class TaskReportProcedure(BaseProcedure):
    """A reasoning procedure that invokes the LLM to produce a generic summary 
    of the agent scratchpad.

    This class extends the BaseProcedure to handle reasoning and report production. 
    It leverages the raw agent scratchpad to produce a report on the agent scratchpad.

    Args:
        llm (LLMClient): The LLM client responsible for executing tasks based 
            on the prompt.
        prompt_template (str): The prompt template that will be formatted and 
            used as input to the LLM.

    Attributes:
        llm (LLMClient): The LLM client responsible for executing tasks based 
            on the prompt.
        prompt_template (str): The prompt template that will be formatted and 
            used as input to the LLM.

    Methods:
        run(context): Generates a task-oriented summary based on the given 
        inputs using the LLM.
    """

    def run(self, context: str):
        """Execute the task report reasoning procedure based on the agent scratchpad

        Args:
            context (str): The agent scratchpad formatted as string

        Returns:
            TaskReportModel: The TaskReportModel formatted by the LLM
        """
        # Format the prompt
        prompt = self.prompt_template.format(
            context=context
        )

        # Invoke LLM
        llm_out = self.llm.invoke(
            response_model=TaskReportModel,
            system_prompt=prompt,
            messages=[]
        )
        cprint(llm_out.task_report, 'green')

        return llm_out
